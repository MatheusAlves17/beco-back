// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npx prisma migrate reset --preview-feature
//  npx prisma migrate dev


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String
  cpf String
  phone String
  birth String
  email String
  password String
  active Boolean @default(true)
  // picture String
  role String @default("client")

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("users")
  address Address[]
  card Card[]
  order Order[]
  item Item[]
  coupon Coupon[]

}

model Address {
  id String @id @default(uuid())
  zipCode String
  street String
  number String
  district String
  city String
  state String

  type String

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("address")

  user User @relation(fields: [user_id], references: [id])
  user_id String

  order Order[]
}

model Card {
  id String @id @default(uuid())
  number String 
  cvv String
  validity String
  name String
  flag String

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("card")
  user User @relation(fields: [user_id], references: [id])
  user_id String

  payment Payment[]
}


model Product {
  id String @id @default(uuid())
  name String
  price Decimal
  description String
  banner String
  stock Decimal

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("products")
  
  items Item[]
  
  category Category @relation(fields: [category_id], references: [id])
  category_id String
}

model Order {
  id String @id @default(uuid())
  
  delivery Decimal
  value_total Decimal

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  
  @@map("orders")
    
  status Status @relation(fields: [status_id], references: [id])
  status_id String
  
  user User @relation(fields: [user_id], references: [id])
  user_id String

  address Address @relation(fields: [address_id], references: [id])
  address_id String

  payment Payment[]
  item Item[]
}

model Item {
  id String @id @default(uuid())
  price Decimal
  name String
  banner String

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  

  @@map("items")
  
  order Order @relation(fields: [order_id], references: [id])
  order_id String
  
  product Product @relation(fields: [product_id], references: [id])
  product_id String

  status Status @relation(fields: [status_id], references: [id])
  status_id String

  user User @relation(fields: [user_id], references: [id])
  user_id String
}

model Status {
  id String @id @default(uuid())
  name String

  @@map("status")
  
  order Order[]
  item Item[]
}

model Category {
  id String @id @default(uuid())
  name String

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("category")

  product Product[] 
}

model Payment {
  id String @id @default(uuid())
  valueTotal Decimal
  
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  
  @@map("payments")
  order Order @relation(fields: [order_id], references: [id])
  order_id String

  card Card @relation(fields: [card_id], references: [id])
  card_id String

  coupon Coupon? @relation(fields: [coupon_id], references: [id])
  coupon_id String? @unique
}

model Coupon {
  id String @id @default(uuid())
  value Decimal
  isUsed Boolean @default(false)


  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  
  @@map("coupons")

  user User @relation(fields: [user_id], references: [id])
  user_id String

  payment Payment?

}