// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npx prisma migrate reset --preview-feature
//  npx prisma migrate dev

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  name     String
  cpf      String
  phone    String
  birth    String
  email    String
  password String
  active   Boolean? @default(true)
  role     String   @default("client")
  // picture String

  created_at     DateTime?       @default(now())
  updated_at     DateTime?       @default(now())
  address        Address[]
  card           Card[]
  order          Order[]
  item           Item[]
  coupon         Coupon[]
  // payment_cards  PaymentCard[]
  // payment_coupon PaymentCoupon[]

  @@map("users")
}

model Address {
  id       String @id @default(uuid())
  zipCode  String
  street   String
  number   String
  district String
  city     String
  state    String

  type String

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  order Order[]

  @@map("address")
}

model Card {
  id        String  @id @default(uuid())
  number    String
  cvv       String
  validity  String
  name      String
  flag      String
  principal Boolean

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  user       User      @relation(fields: [user_id], references: [id])
  user_id    String

  payment_cards PaymentCard[]

  @@map("card")
}

model Product {
  id          String  @id @default(uuid())
  name        String
  price       Decimal
  description String
  banner      String
  stock       Decimal
  path        String?

  weight Decimal?
  active Boolean? @default(true)

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  items Item[]

  category    Category @relation(fields: [category_id], references: [id])
  category_id String

  @@map("products")
}

model Order {
  id String @id @default(uuid())

  delivery    Decimal?
  value_total Decimal

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  status    Status @relation(fields: [status_id], references: [id])
  status_id String

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  address    Address @relation(fields: [address_id], references: [id])
  address_id String

  payment_cards  PaymentCard[]
  payment_coupon PaymentCoupon[]

  item Item[]

  @@map("orders")
}

model Item {
  id     String  @id @default(uuid())
  price  Decimal
  name   String
  banner String
  path   String?

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  order    Order  @relation(fields: [order_id], references: [id])
  order_id String

  product    Product @relation(fields: [product_id], references: [id])
  product_id String

  status    Status @relation(fields: [status_id], references: [id])
  status_id String

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  @@map("items")
}

model Status {
  id   String @id @default(uuid())
  name String

  order Order[]
  item  Item[]

  @@map("status")
}

model Category {
  id   String @id @default(uuid())
  name String

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  product Product[]

  @@map("category")
}

model Coupon {
  id     String  @id @default(uuid())
  value  Decimal
  isUsed Boolean @default(false)

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  payment_coupon PaymentCoupon[]

  @@map("coupons")
}

model PaymentCard {
  id    String   @id @default(uuid())
  value Decimal?

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  order    Order?  @relation(fields: [order_id], references: [id])
  order_id String?

  card    Card?   @relation(fields: [card_id], references: [id])
  card_id String?

  // user    User?   @relation(fields: [user_id], references: [id])
  // user_id String?

  @@map("paymentsCard")
}

model PaymentCoupon {
  id    String   @id @default(uuid())
  value Decimal?

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  order    Order?  @relation(fields: [order_id], references: [id])
  order_id String?

  coupon    Coupon? @relation(fields: [coupon_id], references: [id])
  coupon_id String?

  // user    User?   @relation(fields: [user_id], references: [id])
  // user_id String?

  @@map("paymentsCoupon")
}
